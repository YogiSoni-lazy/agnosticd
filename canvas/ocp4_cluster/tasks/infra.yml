---
- name: Ensure variables are set
  assert:
    that:
    - ocp4_pull_secret is defined
    - ocp4_pull_secret | default("") | length > 0
    fail_msg: ocp4_pull_secret variable must be defined
    success_msg: ocp4_pull_secret variable is defined

- name: GCP Pre infrastructure tasks
  when: cloud_provider == 'gcp'
  block:
  - name: Create GCP credentials file
    include_role:
      name: infra-gcp-credentials-file

  - name: Get Google Cloud SDK
    include_role:
      name: infra-gcp-install-sdk

- name: Azure Pre infrastructure tasks
  when:
  - cloud_provider == 'azure'
  - windows_password is not defined
  block:
  - name: Generate windows Administrator password if not already defined
    command: openssl rand -base64 25
    register: password_gen_r

  - name: Save generated_windows_password
    set_fact:
      generated_windows_password: "{{ password_gen_r.stdout }}"

- name: AWS Pre infrastructure tasks
  when: cloud_provider == 'ec2'
  block:
  # Find and set the AWS Availability Zones using on-demand capacity reservations
  - name: Run infra-aws-capacity-reservation
    include_role:
      name: infra-aws-capacity-reservation
    vars:
      ACTION: 'provision'

  - name: Set availability zones for Cloudformation and install-config.yml
    when: agnosticd_aws_capacity_reservation_results.reservations | default({}) | length > 0
    block:
    - name: Set availability zone for bastion, masters and workers
      vars:
        _r: "{{ agnosticd_aws_capacity_reservation_results.reservations }}"
      set_fact:
        # Cloudformation (bastion)
        aws_availability_zone: "{{ _r.az1.availability_zone }}"
        # masters
        # Support several logical mapping (masters, masters1-3)
        openshift_controlplane_aws_zones_odcr: >-
          {{ [
            _r.masters.availability_zone | default(None),
            _r.masters1.availability_zone | default(None),
            _r.masters2.availability_zone | default(None),
            _r.masters3.availability_zone | default(None),
          ] | select() | list }}
        # workers
        # Support up to 4 zones
        openshift_machineset_aws_zones_odcr: >-
          {{ [
            _r.workers.availability_zone | default(None),
            _r.workers1.availability_zone | default(None),
            _r.workers2.availability_zone | default(None),
            _r.workers3.availability_zone | default(None),
            _r.workers4.availability_zone | default(None),
          ] | select() | list }}


#### Now call Infra

### How?? Right now it's `import_playbook`

#### Infra done

- name: OpenStack post infrastructure
  when: cloud_provider is match("osp")
  environment:
    OS_AUTH_URL: "{{ osp_auth_url }}"
    OS_USERNAME: "{{ osp_auth_username }}"
    OS_PASSWORD: "{{ osp_auth_password }}"
    OS_PROJECT_NAME: "{{ osp_project_name }}"
    OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
    OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"
  block:
  - name: OpenShift floating IPs on OpenStack
    include_role:
      name: ocp-infra-osp-fip

- name: GCP post infrastructure
  when: cloud_provider is match("gcp")
  block:
  - name: Create secret for SSH key
    include_role:
      name: infra-gcp-ssh-key

- name: EC2 post infrastructure
  when: cloud_provider is match("ec2")
  block:
  - name: Get Route53User credentials from stack outputs
    when:
    - cloudformation_out_final is defined
    - cloudformation_out_final.stack_outputs.Route53UserAccessKey is defined
    - cloudformation_out_final.stack_outputs.Route53UserSecretAccessKey is defined
    set_fact:
      route53user: "{{ cloudformation_out_final.stack_outputs.Route53User }}"
      route53user_access_key: "{{ cloudformation_out_final.stack_outputs.Route53UserAccessKey }}"
      route53user_secret_access_key: "{{ cloudformation_out_final.stack_outputs.Route53UserSecretAccessKey }}"

- name: Azure post infrastructure
  when: cloud_provider is match("azure")
  block:
  - name: Store SSH key in shared keyvault
    include_role:
      name: infra-azure-ssh-key

  - name: Set FQDN for the bastion VM
    when: item.name is match('bastion')
    set_fact:
      rhel_remote_host: "{{ item.fqdns | default(item.publicIps) | default('') }}"
    loop: "{{ vm_list }}"

  - name: Set FQDN for each Windows VM
    set_fact:
      windows_remote_hosts: ""

  - name: Set FQDN for each Windows VM
    when: item.name is match ('vmwin*')
    set_fact:
      windows_remote_hosts: "{{ item.fqdns | default(item.publicIps) | default('')  }}, {{ windows_remote_hosts }}"
    loop: "{{ vm_list }}"

  - name: Print Azure host information
    when: ocp4_cluster_show_access_user_info | bool
    agnosticd_user_info:
      msg: "{{ item }}"
    loop:
    - "Remote User:       {{ remote_user }}"
    - "RHEL Bastion Host: {{ rhel_remote_host }}"
    - "Windows Host(s):   {{ windows_remote_hosts }}"
    - "Windows Password:  {{ windows_password }}"
