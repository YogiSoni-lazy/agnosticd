---
- name: Step 00xxxxx post software
  hosts: localhost
  gather_facts: false
  become: true
  tasks:
    - debug:
        msg: "Post-Software tasks Started"

- name: PostSoftware flight-check
  hosts: bastions
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - name: define the load balanced name for the Tower cluster
      set_fact:
        tower_hostname: "{{ tower_instance_name }}.{{ subdomain_base }}"
    - name: validate the Tower setup (config role)
      import_role:
        name: tower_validate_cfg
      tags:
        - tower_validate

- name: Deploy userinfo setup
  hosts: localhost
  gather_facts: false
  tags:
    - step005
  tasks:
    - name: set user.info for user email template
      set_fact:
        __bastion_node: "{{ groups['bastions'][0] | regex_replace('\\..*$') }}"
        __bastion_user: "{{ student_name }}"
        __bastion_password: "{{ student_password }}"
        __ac_node: "{{ groups['acs'][0] | regex_replace('\\..*$') }}"
        __ac_user: "admin"
        __ac_password: "{{ student_password }}"

    - name: set domain for osp cloud provider
      set_fact:
        __subdomain: >-
          {% if cloud_provider == 'osp' -%}
            {{ guid }}.{{ osp_cluster_dns_zone }}
          {% elif cloud_provider == 'ec2' -%}
            {{ guid }}{{ subdomain_base_suffix }}
          {%- endif %}        

    - name: Add variables to /etc/skel/.bashrc and ~{{ control_user_name }}/.bashrc
      become: yes
      lineinfile:
        path: "{{ item }}"
        regexp: 'EOF'
        line: |
          export GUID={{ guid }}
          export SUBDOMAIN={{ __subdomain }}
          export OPENTLC_USER_ID={{ __bastion_user }}
          export OPENTLC_USER_EMAIL={{ email }}
          export CLOUD_PROVIDER={{ cloud_provider }}
          export INTERNAL_DOMAIN=example.com
      loop:
        - "/etc/skel/.bash_profile"
        - "~{{ control_user_name }}/.bash_profile"
        - "~{{ student_name }}/.bash_profile"
      delegate_to: "{{ groups['bastions'][0] }}"

    - name: User's login details
      agnosticd_user_info:
        msg: "{{ item }}"
      loop:
        - "Unique Identifier (GUID)-- {{ guid }}"
        - "Domain for the cluster (SUBDOMAIN)-- {{ __subdomain }}"
        - ""
        - "To Access Ansible controller UI via browser:"
        - "URL: https://{{ __ac_node }}.{{ guid }}.{{ __subdomain }}"
        - "Username: {{ __ac_user }}"
        - "Admin password: {{ __ac_password }}"
        - ""
        - "To Access Control node via SSH:"
        - "ssh {{ __bastion_user }}@{{ __bastion_node }}.{{ guid }}.{{ __subdomain }}"
        - "Enter ssh password when prompted: {{ __bastion_password }}"

    - name: Save user data
      agnosticd_user_info:
        data:
          ssh_command: "ssh {{ __bastion_user }}@{{ __bastion_node }}.{{ guid }}.{{ __subdomain }}"
          ssh_password: "{{ __bastion_password }}"
          URL: "https://{{ __ac_node }}.{{ guid }}.{{ __subdomain }}"
          Username: "{{ __ac_user }}"
          Admin_password: "{{ __ac_password }}"


- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"
