---
- name: debug ec2_instance_info
  debug:
    var: aws_region_final | default(aws_region)
    verbosity: 2

- name: Gather EC2 instance info
  amazon.aws.ec2_instance_info:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    filters:
      "tag:Project": "{{ project_tag }}"
  register: ec2_instance_info
  tags:
    - create_inventory
    - must

- name: debug ec2_instance_info
  debug:
    var: ec2_instance_info
    verbosity: 2

- name: windows ostype workaround
  set_fact:
    project_tag_ostype: "{{ project_tag }}_ostype"
  tags:
    - create_inventory
    - must

- set_fact:
    stack_tag: "{{ env_type | replace('-', '_') }}_{{ guid }}"
  tags:
    - create_inventory
    - must

# Find the bastion
- name: Find the bastion in this batch of host
  set_fact:
    local_bastion: "{{ instance.tags.internaldns }}"
  when:
    - instance.state.name != 'terminated'
    - '"bastions" in instance.tags.AnsibleGroup'
  loop: "{{ ec2_instance_info['instances'] }}"
  loop_control:
    label: "{{ instance.tags.internaldns | default(instace.private_dns_name) }}"
    loop_var: instance
  ignore_errors: true

- name: Add instances to Ansible Inventory
  add_host:
    name: "{{ instance.tags.internaldns | default(instance.private_dns_name) }}"
    shortname: "{{ instance.tags.Name | default(instance.private_dns_name) }}"
    groups:
      - "tag_Project_{{ stack_tag }}"
      - "tag_{{ stack_tag }}_{{ instance['tags'][project_tag] | default('unknowns') }}"
      - "tag_{{ stack_tag }}_ostype_{{ instance['tags'][project_tag_ostype] | default('unknown') }}"
      - "{{ instance.tags.ostype | default('unknowns') }}"
      - "{{ instance['tags'][project_tag_ostype] | default('unknowns') }}"
      - "{{ 'newnodes' if (instance.tags.newnode|d()|bool) else 'all' }}"
    ansible_user: ec2-user
    remote_user: ec2-user
    ansible_ssh_private_key_file: "{{ instance['key_name'] }}"
    key_name: "{{ instance['key_name'] }}"
    state: "{{ instance['state'] }}"
    internaldns: "{{ instance.tags.internaldns | default(instance.private_dns_name) }}"
    isolated: "{{ instance.tags.isolated | default(false) }}"
    instance_id: "{{ instance.instance_id }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1') }}"
    public_dns_name: "{{ instance['public_dns_name'] }}"
    private_dns_name: "{{ instance['private_dns_name'] }}"
    private_ip_address: "{{ instance['private_ip_address'] }}"
    public_ip_address: "{{ instance['public_ip_address'] | default(omit) }}"
    placement: "{{ instance['placement']['availability_zone'] }}"
    image_id: "{{ instance['image_id'] }}"
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: "{{ instance.tags.ansible_python_interpreter | default(omit) }}"
    bastion: "{{ local_bastion | default('') }}"
  when: instance.state.name != 'terminated'
  loop: "{{ ec2_instance_info['instances'] }}"
  loop_control:
    label: "{{ instance.tags.internaldns | default(instance.private_dns_name) }}"
    loop_var: instance
  tags:
    - create_inventory
    - must

# AnsibleGroup tag can have several comma-separated values. Ex: activedirectories,windows
- name: Add instances to groups based on AnsibleGroup tag
  add_host:
    name: "{{ instance.tags.internaldns | default(instance.private_dns_name) }}"
    groups: "{{ instance.tags.AnsibleGroup }}"
  when: instance.state.name != 'terminated'
  loop: "{{ ec2_instance_info['instances'] }}"
  loop_control:
    label: "{{ instance.tags.internaldns | default(instance.private_dns_name) }}"
    loop_var: instance
  tags:
    - create_inventory
    - must

- name: debug hostvars
  debug:
    var: hostvars
    verbosity: 2

- name: debug groups
  debug:
    var: groups
    verbosity: 2
